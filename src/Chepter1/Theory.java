package Chepter1;

public class Theory {


    /*
       1.자바의 특징

            1. 객체지향 프로그래밍
            2. 분산 네트워크 기술 지원
            3. 간단한 코드 작성 가능
            4. 다중 스레드 지원 - 하나의 프로그램에서 여러 개의 스레드가 병렬적으로 수행됨
            5. 보안기능 지원
            6. Java SE, Java EE, Java ME 에서 동작 가능한 프로그램 개발 가능
                SE : 데스크탑 컴퓨터에서 실행되는 응용 프로그램 개발
                EE : 대규모 엔터프라이즈 기반 애플리케이션인 서버와 클라이언트 측 분산 프로그램 개발에 사용
                ME : 모바일 및 임베디드 기반 애플리케이션 개발 환경 사용 가능

            7. 플랫폼이 독립적 - 한번 만들어진 프로그램은 운영체제와 상관없이 실행 되어진다.
            (JVM - 자바 가상 머신) https://velog.io/@yulhee741/Java-%EC%9E%90%EB%B0%94-JVM-JDK-JRE

            8. 모든 자바 개발 플랫폼의 기본 환경인 Java SE의 JDK 구조이다.
            JRE(Java Runtime Environment)는 실행환경만을 제공하며, JDK는 실행환경 및 개발도구까지 포함하여 제공한다.

            개발도구 - 컴파일러 및 인터프리터를 포함한 여러가지 명령어를 의미

            -> 자바 어플리케이션을 개발하는 개발자는 JDK를 설치하고, 개발된 어플리케이션을 실행하는 사용자는 JRE를 설치하면 된다.

     */

    /*
        2. JVM (Java Virtual Machine)

            1. 실제 하드웨어에 소프트웨어가 설치되어 구현된 가상 CPU이다.
            2. 내부적으로 다음과 같은 하드웨어 형식에 대한 정보를 제공한다.
                Instruction Set
                Register Set
                Stack
                Heap
                Memory

           3. 플랫폼에서 독립적인 코드인 바이트코드를 실행한다.
           * 바이트코드 - 개발자가 작성한 자바소스코드를 컴파일하면 생성되는 클래스파일(확장자 class) 을 의미한다.
                         바이트코드는 운영체제에 독립적이며, JVM만 설치되어 있으면 어떤 환경에서든지 실행이 가능하다.

     */

    /*
        3. 객체지향 프로그래밍이란?
            1. 객체지향 프로그래밍
                -> 다른 객체와 상호작용할 수 있는 재사용 가능한 객체를 이용하여 문제를 해결하는 방법

                     1. 모듈성 - 특정 객체의 소스코드를 다른 객체의 소스코드와 분리하여 독립적으로 작성하고 유지 관리한다.

                     2. 정보은닉 - 객체의 내부구현에 대한 상세 정보를 외부에 노출하지 않고, 다른 객체와 상호작용을 할 수있는
                     방법을 제공한다. 정보보호와 복잡성이 감소되는 장점

                    3. 코드 재사용 - 사용하려는 객체가 이미 존재하는 경우에 새로 만들지 않고 재사용이 가능하다.

            2. 절차지향형 프로그래밍
                -> 순서에 초점을 두는 개발방법
                -> 코드가 짜여진 절차대로 순서있게 진행되는 방법으로, 데이터의 구조나 특징이 변경되면
                   전체코드에 영향을 줄 수 있는 단점이 있다.
    */

    /*
        4. 개발 프로세스
            요구사항분석 -> 설계 -> 구현 -> 테스트 -> 유지보수

            1. 분석 - 누가 사용할 것인가? 무엇을 만들것인가? 및 애플리케이션 개발에 필요한 객체 추출

            2. 설계 - 객체간의 관계설정 및 추상화작업

            3. 구현 - 지정된 프로그램언어로 코드를 구현, 배치 전에 테스트 과정을 거친다.

            4. 테스트

            * 객체 - 현실세계에서 주체가 바라본 사물 및 대상
            * 추상화 - 적합한 객체를 추출하는 과정

            * 객체지향 프로그래밍 기법 - 현실세계에 존재하는 객체 및 관계를 가상세계로 반영시켜 개발하는 방법론
     */

}
