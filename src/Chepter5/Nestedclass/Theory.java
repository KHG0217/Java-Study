package Chepter5.Nestedclass;
/*
    중첩클래스
        중첩클래스란 클래스안에 또 다른 클래스가 정의되는 것을 의미한다.

        일반적인 클래스는 독립적으로 정의하고 사용되지만, 중첩 클래스는 멤버형태로 클래스를 포함할 수 있으며,
        중첩되는 클래스의 개수는 제한이 없다.

        1. Outer 클래스 - 중첩 클래스를 포함하는 바깥 클래스
        2. Inner 클래스 - 내부에 포함된 클래스

            Inner 클래스의 특징
                - Inner 쿨래스는 Outer 클래스의 멤버를 마치 자신의 멤버처럼 사용할 수 있다.
                - Outer 클래스 멤버의 접근 지정자가 private 일지라도 접근 할 수 있다.
                - Inner 클래스의 접근은 반드시 Outer 클래스를 통해서 접근 할 수 있다.
                - 단, static inner 클래스는 직접 접근이 가능하다.
                - 소스 파일을 컴파일 하면 Inner 클래스는 Outer$Inner.class 형삭으로 클래스파일이 생성된다.
                - 정의되는 위치에 따라서 4가지 형태의 Inner 클래스가 제공된다.
                    1. member - Outer 클래스의 멤버변수나 메서드처럼 클래스가 정의된 경우이다.
                    2. local - Outer 클래스의 특정 메서드 안의 로컬변수처럼 클래스가 정의된 경우
                    3. static - static 키워드를 이용해서 클래스가 정의된 경우
                    4. anonymous - 익명 클래스를 이용해서 클래스가 정의된 경우

                 1. member inner 클래스
                    -> 객체를 생성해야만 사용할 수 있는 Outer 클래스의 변수, 메서드와 같은 수준으로 선언된
                    static 키워드를 사용하지 않은 클래스를 의미한다.

                    주의할 점은 Inner 클래스를 사용하기 위해서는 반드시 Outer 클래스를 먼저 객체 생성해야 한다.

                 2. local Inner 클래스
                    -> Outer 클래스의 메서드 안에서 정의한 클래스를 의미한다.
                    메서드 안에서 정의되었기 때문에 로컬변수처럼 인식된다.
                    따라서 local inner 클래스는 메서드가 호출될 때 생성되며 메서드가 종료될 때 삭제된다.

                 3. static Inner 클래스
                    -> Inner 클래스를 정의할 떄 stati 키워드를 사용하는 형태
                    -> Outer 클래스를 생성하지 않아도 Inner 클래스를 직접 접근할 수 있다.
                    -> 반면에 Outer 클래스의 멤버변수는 접근이 불가능하다.
                    -> 따라서 Inner 클래스에서 static 변수를 포함해야 되는 경우에만 사용하도록 한다.

                 4. anonymous Inner 클래스 ( 익명 클래스 )
                    -> 직접 클래스명을 지정하지 않으며, 인스턴스의 생성과 메서드 선언만 정의한다.
                    -> 일반적으로 인터페이스 똔느 추상클래스를 구현하는 클래스로 자주 사용한다.
                    -> 익명클래스를 함수형 프로그래밍 기반으로 확장 표현한 것이 람다식이다.

 */
public class Theory {
}
