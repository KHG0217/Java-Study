package Chepter4.Polymorphism;

public class Polmorphism_theoy {
    /*
        상속관계의 계층구조에서 상위타입의 변수로 모든 하위타입을 참조할 수 있는 특성을 '다형성' 이라고한다
                1. 코드는 '부모타입' = '자식타입' 형식으로 사용된다
                2. 서로 다른 데이터를 배열에 저장하거나
                서로 다른 데이터를 하나의 메서드에 전달하는 경우에 다형성을 활용할 수있다.
                * '자식타입' = '부모타입' 형식으로 사용하기 위해서는 강제 형번환이 필요하다

                ex)
                    Employee - 부모
                    Manger - 자식
                    Engineer - 자식

                        Employee e = new Employee()
                            e = new Manger()
                            e = new Engineer()

                     => 이처럼 하나의 변수를 사용하여 3개의 서로 다른 타입을 저장할 수 있기 때문에
                     재사용이 향상되며 효율적으로 관리가 가능하다.

            2. Object 클래스
               1. 모든 클래스의 최상위 클래스
               2. 자동으로 상속 됨

               3. equals 메서드 객체의 값을 동등비교 할 때 사용한다.
               일반적으로 기본 데이터형의 값 비교시에는 == 연산자 사용, 객체인 인스턴스 값 비교시 equals 사용

               4. toString() 메서드
               => 객체를 문자열로 변경시키는 메서드
               => 이 메서드는 객체를 참조한느 참조형 변술르 print 및 println 메서드를 사용하여 콘솔에 출력할때
               자동으로 호출된다.(객체를 문자열로 변경시켜야 가능하기 때문에)
     */
}
