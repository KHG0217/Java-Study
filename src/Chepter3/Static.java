package Chepter3;
// staitic import 사용하는 방법
import static java.lang.Math.PI; // static final 상수
import static java.lang.Integer.parseInt; // static 메서드


public class Static {

    /*
    *   일반적으로 자바 프로그램은 다음 과정을 거쳐서 출력한다.
    *
    *       1. 소스코드 작성
    *       2. 클래스파일 생성
    *       3. 클래스파일 실행
    *       4. 클래스 로딩 <- static 키워드를 사용한 static 변수와 메서드가 메모리에 자동으로 로딩됨
    *       5. main 메서드 실행 (시작점)
    *       6. 인스턴스 생성 <- new 이용하여 인스턴스 변수와 메서드를 메모리에 로딩한다.
    *       7. 메서드 호출 <- 메서드안에서 선언된 로컬변수가 생성된다.
    *       8. 결과값 출력
    *
    * */

    /*
    *   Static 특징
    *       Static 변수는 '클래스'와 관계가 있다. / 인스턴스 변수는 '인스턴스'와 관계가 있고, 로컬 변수는 '메서드'와 관계있다.
    *
    *           1. 프로그램이 실행될 때 클래스가 먼저 메모리에 로딩된다. (이때 static변수와 메서드도 함께 로딩)
    *           2. 클래스, 변수, 메서드의 지정자로 사용할 수 있다.
    *               1. 클래스 - inner 클래스에서만 사용되며
    *               2. 변수 - 인스턴스에서 공유 데이터를 사용할 목적으로 사용
    *               3. 메서드 - 객체생성 없이 메서드를 접근할 목적으로 사용
    *           3. Static는 클래스와 관련이 있어 한번 생성되면 프로그램 끝날때까지 살아있고, 끝나면 없어진다.
    *           4. 객체생성 없이도 가능
    *           5. static에선 오버라이딩이 불가능
    *           6. static 메서드 내에서 인스턴스 변수 접근이 불가능
    *           7. static 블록을 이용하여 어플리케이션에 필요한 초기화 작업을 할 수 있다. (파일 및 DB연동)
    *
    * */


    static int count;
    int num;
    public Static(){
        count++;
        num = count;
    }
    public int getNum(){return num;};

    //1.자바에 사용되는 3 가지 변수에 관한 내용 정리

    /*
    *   1. 로컬변수 - 메서드내에서 정의/
    *                메서드 호출하여 생성하고 끝나면 제거/ static 메모리 /
    *                사용전에 반드시 초기화 / public void a(){int num = 2; }
    *
    *   2. 인스턴스변수 - 메서드 밖에서 정의/
    *                    객체생성시 생성 객체소멸시 제거/
    *                    heap 메모리 /
    *                    초기화하지 않으면 자동으로 기본값으로 설정 / int suze;
    *
    *   3. static변수 (class 변수) - 메서드 밖에서 정의 단 static 키워드 이용/
    *                               프로그램 실행시 생성되고 프로그램 종룡시 제거 ( 단 한번만 생성됨)/
    *                               method area 영역 /
    *                               초기화 하지 않으면 자동으로 기본값으로 설정됨/
    *                               static int x;
    * */


}

